What I created

- Root setup: package.json, pnpm-workspace.yaml, .env.example, README.md.
- Move contract: contracts/sui-ads/sources/AdMarket.move with AdSlot and events; create_slot, bid, lock_rental, update_creative. The slot is shared so anyone
  can bid; simplified payout to publisher (protocol fee omitted for MVP).
- Indexer/API (TypeScript + Express + Prisma):
  - Code: indexer/src/{index.ts, routes.ts, db.ts, sui.ts, types.ts}.
  - Prisma schema: indexer/prisma/schema.prisma with Slot and Event tables.
  - Endpoints:
  - `GET /api/slot/:id/current`
  - `GET /api/slots?domainHash=&size=WxH`
  - `GET /api/publisher/:addr/slots`
  - `POST /api/walrus/upload` (local mock to `indexer/uploads` + sha256 “mock://sha256-…” CID)
  - `POST /api/creative/anchor`
  - MVP tx helpers (server-signed): `POST /api/tx/createSlot`, `/api/tx/bid`, `/api/tx/lock`
- SDK (UMD):
  - Files: packages/sdk/src/index.ts, rollup.config.js, package.json.
  - Exposes window.Aquads.mount(el, { slotId }) and script attribute data-slot. (Legacy alias window.SuiAds kept.)
  - Loads current slot from API, fetches meta JSON (Walrus or mock), verifies with mock Seal, renders image.
  - Mock CID support: mock://sha256-... mapped to /uploads/{hash}.json.
- Shared types: packages/shared/src/types.ts.
- Admin (Vite+React): - Files: apps/admin/src/{main.tsx, App.tsx}, index.html. - Features: Create Slot (server-signed), list slots with filter, Bid/Lock (server-signed), Upload creative and Anchor; live preview iframe of publisher
  demo.
- Publisher demo (Vite, Vanilla):
  - Files: apps/publisher-demo/index.html, vite.config.ts.
  - Hosts /sdk/aquads.umd.js from packages/sdk/dist during dev. A sample <div data-slot-id="0xSLOT"> + SDK.
- Scripts:
  - scripts/dev-all.sh uses root pnpm dev.
  - scripts/seed.ts creates a sample slot via API (after indexer up).

How to run locally

- Prepare env:
  - Copy .env.example to .env. Fill SUI_PACKAGE_ID after deploy; ensure PUBLISHER_PRIVATE_KEY and ADVERTISER_PRIVATE_KEY (ed25519:...).
- Install deps:
  - pnpm i (at repo root).
  - Generate Prisma client: pnpm --filter @aquads/indexer prisma:generate
- Deploy contracts:
  - pnpm deploy:contracts (then set SUI_PACKAGE_ID and keep SUI_MODULE_NAME=ad_market).
- Run services:
  - Start indexer/API: pnpm dev:indexer (http://localhost:8787).
  - Build SDK: pnpm --filter @aquads/sdk build:watch.
  - Start admin: pnpm --filter @aquads/admin dev (http://localhost:5173).
  - Start publisher demo: pnpm --filter @aquads/publisher-demo dev (http://localhost:5174).
- Demo workflow:
  - Admin: Create slot (DomainHash: hex string like 0x…; size and reserve).
  - Admin: Bid or Lock on that slot (server-signed via ADVERTISER key).
  - Admin: Upload creative (image) → upload returns metaCid → Anchor creative.
  - Publisher demo: Put the slot ID into the data-slot-id or data-slot and see image render immediately.
  - Note: I set `window.__SEAL_DISABLE = true` in publisher demo for permissive mock Seal.

Key paths and commands

- Contracts: contracts/sui-ads/sources/AdMarket.move
- Indexer: indexer/src/index.ts with routes in indexer/src/routes.ts
- SDK: packages/sdk/dist/aquads.umd.js → auto served in publisher demo as /sdk/aquads.umd.js
- Admin: apps/admin/src/App.tsx
- Demo: apps/publisher-demo/index.html
- Start all in one: ./scripts/dev-all.sh (or use root pnpm dev)

Assumptions and simplifications

- Payout: Bid/Lock payment goes directly to the publisher (protocol fee omitted for MVP).
- Expiry: lock_rental stores lock_secs directly as expiry (interpreted as absolute or offset; no on-chain clock used to avoid passing Clock).
- Indexer: Polling events instead of websockets; stores a simple in-memory cursor each run.
- Walrus: Mocked locally when needed with mock:// CIDs.
- Seal: Mocked verification; can be disabled with window.\_\_SEAL_DISABLE = true.
